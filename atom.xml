<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WriterCode</title>
  <icon>https://www.gravatar.com/avatar/d5819f26b54e90cb5ba114431c09fb0a</icon>
  <subtitle>学如逆水行舟，不进则退</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="writercode.github.io/"/>
  <updated>2017-11-28T07:20:54.096Z</updated>
  <id>writercode.github.io/</id>
  
  <author>
    <name>费华枝</name>
    <email>1097529720@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现元素上下左右居中</title>
    <link href="writercode.github.io/2017/11/28/css/"/>
    <id>writercode.github.io/2017/11/28/css/</id>
    <published>2017-11-28T06:51:23.000Z</published>
    <updated>2017-11-28T07:20:54.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-已知元素上下左右居中"><a href="#1-已知元素上下左右居中" class="headerlink" title="(1)已知元素上下左右居中"></a>(1)已知元素上下左右居中</h1><p><strong><em>例:已知宽高都是200的元素上下左右居中</em></strong></p><pre><code>#div1{    background-color:#6699FF;    width:200px;    height:200px;    position: absolute;        //父元素需要相对定位    top: 50%;    left: 50%;    margin-top:-100px ;   //二分之一的height，width    margin-left: -100px;}</code></pre><a id="more"></a><h1 id="2-未知元素上下左右居中"><a href="#2-未知元素上下左右居中" class="headerlink" title="(2)未知元素上下左右居中"></a>(2)未知元素上下左右居中</h1><pre><code>#div1{    width: 200px;    height: 200px;  //宽高就可以随意设置了，无需在设置其他的代码，永运句中显示    background-color: #6699FF;    margin:auto;    position: absolute;        //父元素需要相对定位    left: 0;    top: 0;    right: 0;    bottom: 0;}</code></pre><h1 id="3-那么问题来了，如何垂直居中一个"><a href="#3-那么问题来了，如何垂直居中一个" class="headerlink" title="(3)那么问题来了，如何垂直居中一个?"></a>(3)那么问题来了，如何垂直居中一个<img>?</h1><pre><code>#container {    display:table-cell;    text-align:center;    vertical-align:middle;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-已知元素上下左右居中&quot;&gt;&lt;a href=&quot;#1-已知元素上下左右居中&quot; class=&quot;headerlink&quot; title=&quot;(1)已知元素上下左右居中&quot;&gt;&lt;/a&gt;(1)已知元素上下左右居中&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;例:已知宽高都是200的元素上下左右居中&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#div1{
    background-color:#6699FF;
    width:200px;
    height:200px;
    position: absolute;        //父元素需要相对定位
    top: 50%;
    left: 50%;
    margin-top:-100px ;   //二分之一的height，width
    margin-left: -100px;
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="CSS" scheme="writercode.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="writercode.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>VUE的值传递总结--子传父</title>
    <link href="writercode.github.io/2017/11/28/vue1/"/>
    <id>writercode.github.io/2017/11/28/vue1/</id>
    <published>2017-11-28T02:59:30.000Z</published>
    <updated>2017-11-28T11:51:54.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-子传父"><a href="#一-子传父" class="headerlink" title="一 子传父"></a>一 子传父</h1><p>我们知道，父组件使用 prop 传递数据给子组件。但子组件怎么跟父组件通信呢？这个时候 Vue 的自定义事件系统就派得上用场了。<br><a id="more"></a></p><h4 id="使用-v-on-绑定自定义事件"><a href="#使用-v-on-绑定自定义事件" class="headerlink" title="#使用 v-on 绑定自定义事件"></a><strong><em>#使用 v-on 绑定自定义事件</em></strong></h4><p>每个 Vue 实例都实现了事件接口，即：</p><ul><li>使用<strong>$on(eventName)</strong>监听事件</li><li>使用<strong>$emit(eventName)</strong>触发事件</li></ul><blockquote><p>Vue 的事件系统与浏览器的 EventTarget API 有所不同。尽管它们的运行起来类似，但是 $on 和 $emit 并不是addEventListener 和 dispatchEvent 的别名。</p></blockquote><p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p><blockquote><p>不能用 $on 侦听子组件释放的事件，而必须在模板里直接用 v-on 绑定，参见下面的例子。</p></blockquote><p>下面是一个例子:<br><strong><em>html部分</em></strong></p><pre><code>&lt;div id=&quot;father&quot;&gt;    &lt;p&gt;{{faData}}&lt;/p&gt;    &lt;p&gt;{{getData}}&lt;/p&gt;    &lt;son-item @diy-event=&quot;faMethod&quot;&gt;&lt;/son-item&gt;&lt;/div&gt;&lt;template id=&quot;son&quot;&gt;    &lt;div @click=&quot;sonMethod&quot;&gt;{{sonData}}&lt;/div&gt;&lt;/template&gt;</code></pre><p><strong><em>js部分</em></strong></p><pre><code>&lt;script&gt;    Vue.component(&apos;son-item&apos;, {        template: &apos;#son&apos;,        data() {            return {                sonData: &quot;这是子组件的数据&quot;            }        },        methods: {            sonMethod() {                this.$emit(&apos;diy-event&apos;, this.sonData);                console.log(this.sonData);            }        }    })    var app = new Vue({        el: &apos;#father&apos;,        data: {            faData: &quot;这是父组件的数据&quot;,            getData: &quot;哈哈哈哈&quot;        },        methods: {            faMethod(val) {                this.getData = val;                console.log(this.getData);            }        }    })&lt;/script&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-子传父&quot;&gt;&lt;a href=&quot;#一-子传父&quot; class=&quot;headerlink&quot; title=&quot;一 子传父&quot;&gt;&lt;/a&gt;一 子传父&lt;/h1&gt;&lt;p&gt;我们知道，父组件使用 prop 传递数据给子组件。但子组件怎么跟父组件通信呢？这个时候 Vue 的自定义事件系统就派得上用场了。&lt;br&gt;
    
    </summary>
    
      <category term="vue.js" scheme="writercode.github.io/categories/vue-js/"/>
    
    
      <category term="vue" scheme="writercode.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE的值传递总结--父传子</title>
    <link href="writercode.github.io/2017/11/28/vue/"/>
    <id>writercode.github.io/2017/11/28/vue/</id>
    <published>2017-11-28T02:59:30.000Z</published>
    <updated>2017-11-28T06:57:49.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-父传子"><a href="#一-父传子" class="headerlink" title="一 父传子"></a>一 父传子</h1><p><strong><em># 使用Prop传递数据</em></strong><br>组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。<br><a id="more"></a></p><h5 id="下面是我自己写的一段父传子在html中实现的代码"><a href="#下面是我自己写的一段父传子在html中实现的代码" class="headerlink" title="下面是我自己写的一段父传子在html中实现的代码"></a>下面是我自己写的一段父传子在html中实现的代码</h5><pre><code>&lt;body&gt;    &lt;div id=&quot;fater&quot;&gt;        &lt;p&gt;{{faData}}&lt;/p&gt;        &lt;son-item :getmsg=&quot;faData&quot;&gt;&lt;/son-item&gt;    &lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;&lt;template id=&quot;son&quot;&gt;    &lt;div&gt;{{getmsg}}&lt;/div&gt;&lt;/template&gt;&lt;script&gt;    Vue.component(&apos;son-item&apos;, {        template: &apos;#son&apos;,        props: [&apos;getmsg&apos;],        data() {            return {                sonData: &apos;这是子组件的数据&apos;            }        }    })    var fater = new Vue({        el: &apos;#fater&apos;,        data: {            faData: &apos;这是父组件的数据&apos;        }    })&lt;/script&gt; </code></pre><p>Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。<br>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-父传子&quot;&gt;&lt;a href=&quot;#一-父传子&quot; class=&quot;headerlink&quot; title=&quot;一 父传子&quot;&gt;&lt;/a&gt;一 父传子&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;# 使用Prop传递数据&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。&lt;br&gt;
    
    </summary>
    
      <category term="vue.js" scheme="writercode.github.io/categories/vue-js/"/>
    
    
      <category term="vue" scheme="writercode.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
