<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WriterCode</title>
  <icon>https://www.gravatar.com/avatar/d5819f26b54e90cb5ba114431c09fb0a</icon>
  <subtitle>学如逆水行舟，不进则退</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="writercode.github.io/"/>
  <updated>2017-11-28T07:17:47.236Z</updated>
  <id>writercode.github.io/</id>
  
  <author>
    <name>费华枝</name>
    <email>1097529720@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现元素上下左右居中</title>
    <link href="writercode.github.io/2017/11/28/css/"/>
    <id>writercode.github.io/2017/11/28/css/</id>
    <published>2017-11-28T06:51:23.000Z</published>
    <updated>2017-11-28T07:17:47.236Z</updated>
    
    <content type="html"><![CDATA[<!-- # (1)已知元素上下左右居中***例:已知宽高都是200的元素上下左右居中***                #div1{                    background-color:#6699FF;                    width:200px;                    height:200px;                    position: absolute;        //父元素需要相对定位                    top: 50%;                    left: 50%;                    margin-top:-100px ;   //二分之一的height，width                    margin-left: -100px;                }<a id="more"></a><h1 id="2-未知元素上下左右居中"><a href="#2-未知元素上下左右居中" class="headerlink" title="(2)未知元素上下左右居中"></a>(2)未知元素上下左右居中</h1><pre><code>#div1{    width: 200px;    height: 200px;  //宽高就可以随意设置了，无需在设置其他的代码，永运句中显示    background-color: #6699FF;    margin:auto;    position: absolute;        //父元素需要相对定位    left: 0;    top: 0;    right: 0;    bottom: 0;}</code></pre><h1 id="3-那么问题来了，如何垂直居中一个"><a href="#3-那么问题来了，如何垂直居中一个" class="headerlink" title="(3)那么问题来了，如何垂直居中一个?"></a>(3)那么问题来了，如何垂直居中一个<img>?</h1><pre><code>#container {    display:table-cell;    text-align:center;    vertical-align:middle;} --&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;!-- # (1)已知元素上下左右居中
***例:已知宽高都是200的元素上下左右居中***
                #div1{
                    background-color:#6699FF;
                    width:200px;
                    height:200px;
                    position: absolute;        //父元素需要相对定位
                    top: 50%;
                    left: 50%;
                    margin-top:-100px ;   //二分之一的height，width
                    margin-left: -100px;
                }
    
    </summary>
    
      <category term="CSS" scheme="writercode.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="writercode.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>VUE的值传递总结--父传子</title>
    <link href="writercode.github.io/2017/11/28/vue/"/>
    <id>writercode.github.io/2017/11/28/vue/</id>
    <published>2017-11-28T02:59:30.000Z</published>
    <updated>2017-11-28T06:57:49.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-父传子"><a href="#一-父传子" class="headerlink" title="一 父传子"></a>一 父传子</h1><p><strong><em># 使用Prop传递数据</em></strong><br>组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。<br><a id="more"></a></p><h5 id="下面是我自己写的一段父传子在html中实现的代码"><a href="#下面是我自己写的一段父传子在html中实现的代码" class="headerlink" title="下面是我自己写的一段父传子在html中实现的代码"></a>下面是我自己写的一段父传子在html中实现的代码</h5><pre><code>&lt;body&gt;    &lt;div id=&quot;fater&quot;&gt;        &lt;p&gt;{{faData}}&lt;/p&gt;        &lt;son-item :getmsg=&quot;faData&quot;&gt;&lt;/son-item&gt;    &lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;vue.min.js&quot;&gt;&lt;/script&gt;&lt;template id=&quot;son&quot;&gt;    &lt;div&gt;{{getmsg}}&lt;/div&gt;&lt;/template&gt;&lt;script&gt;    Vue.component(&apos;son-item&apos;, {        template: &apos;#son&apos;,        props: [&apos;getmsg&apos;],        data() {            return {                sonData: &apos;这是子组件的数据&apos;            }        }    })    var fater = new Vue({        el: &apos;#fater&apos;,        data: {            faData: &apos;这是父组件的数据&apos;        }    })&lt;/script&gt; </code></pre><p>Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。<br>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-父传子&quot;&gt;&lt;a href=&quot;#一-父传子&quot; class=&quot;headerlink&quot; title=&quot;一 父传子&quot;&gt;&lt;/a&gt;一 父传子&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;# 使用Prop传递数据&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。&lt;br&gt;
    
    </summary>
    
      <category term="vue.js" scheme="writercode.github.io/categories/vue-js/"/>
    
    
      <category term="vue" scheme="writercode.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
